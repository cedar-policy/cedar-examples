// deny a discord permission, (e.g. Deny::"SendMessage")
entity Deny;

// allow a discord permission, (e.g. Allow::"SendMessage")
entity Allow;

// discord roles for a server
// (e.g. Role::"everyone" is the default role)
// discord roles have user-configurable permissions
entity Role in [Allow, Deny];

// discord roles with channel-specific permissions
// (e.g. Role::"everyone-annoucements")
// ChannelRole permissions take precedent over Role permissions
entity ChannelRole in [Allow, Deny];


// For each user, store an entity whose parents
// are the roles a user has.
entity Roles in [Role];

// For each user, store an entity whose parents
// are all the channel-specific roles a user has
entity ChannelRoles in [ChannelRole];

// every user has roles and channel-specific roles
entity User = {
  roles: Roles,
  channel_roles: ChannelRoles,
  // a user is specific to a channel
  // if Cedar had a `Map` data structure, we could store
  // channel_roles: Map<Channel, ChannelRoles> instead
  channel: Channel,
};

entity Channel;


action SendMessage, KickMember appliesTo {
  principal: [User],
  resource:  [Channel]
};

action ManageRole appliesTo {
  principal: [User],
  resource:  [Role]
};
